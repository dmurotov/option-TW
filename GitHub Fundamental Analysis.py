import streamlit as st
import pandas as pd
import yfinance as yf

from PIL import Image
from io import BytesIO

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ –∞–∫—Ü–∏–π", layout="wide")

def safe_get(info, key, multiplier=1, suffix="", percent=False):
    value = info.get(key)
    if value is None:
        return "–ù/–î", "üî¥ –ü–ª–æ—Ö–æ"
    try:
        val = round(value * multiplier, 2) if isinstance(value, (int, float)) else value
        if percent:
            val = f"{val:.2f}%"
        return f"{val}{suffix}", "üü¢ –•–æ—Ä–æ—à–æ"
    except:
        return "–ù/–î", "üî¥ –ü–ª–æ—Ö–æ"

def get_data(ticker):
    try:
        stock = yf.Ticker(ticker)
        info = stock.info

        if not isinstance(info, dict) or not info:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–∫–µ—Ä—É.")
            return []

        data = []

        def add(label, key, multiplier=1, suffix="", percent=False):
            value, rating = safe_get(info, key, multiplier, suffix, percent)
            data.append({"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": label, "–ó–Ω–∞—á–µ–Ω–∏–µ": value, "–û—Ü–µ–Ω–∫–∞": rating})

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        add("P/E (TTM)", "trailingPE")
        add("Forward P/E", "forwardPE")
        add("P/B", "priceToBook")
        add("P/S", "priceToSalesTrailing12Months")
        data.append({"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": "P/FCF", "–ó–Ω–∞—á–µ–Ω–∏–µ": "–ù/–î (–æ—Ç—Ä–∏—Ü. FCF)", "–û—Ü–µ–Ω–∫–∞": "üî¥ –ü–ª–æ—Ö–æ"})
        add("D/E", "debtToEquity")
        add("PEG Ratio", "pegRatio")
        add("Enterprise Value", "enterpriseValue", 1e-6, " –º–ª–Ω")
        data.append({"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": "Peter Lynch Price (PLP)", "–ó–Ω–∞—á–µ–Ω–∏–µ": "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "–û—Ü–µ–Ω–∫–∞": "üîµ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"})
        data.append({"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": "Piotroski F-Score", "–ó–Ω–∞—á–µ–Ω–∏–µ": "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ", "–û—Ü–µ–Ω–∫–∞": "üîµ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"})
        data.append({"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": "Altman Z-Score", "–ó–Ω–∞—á–µ–Ω–∏–µ": "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ", "–û—Ü–µ–Ω–∫–∞": "üîµ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"})
        data.append({"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": "Beneish M-Score", "–ó–Ω–∞—á–µ–Ω–∏–µ": "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ", "–û—Ü–µ–Ω–∫–∞": "üîµ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"})
        add("Dividend Yield (%)", "dividendYield", percent=True)
        add("Payout Ratio", "payoutRatio", percent=True)
        data.append({"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": "Dividend Growth 5Y", "–ó–Ω–∞—á–µ–Ω–∏–µ": "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ", "–û—Ü–µ–Ω–∫–∞": "üîµ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"})
        add("Quick Ratio", "quickRatio")
        add("Current Ratio", "currentRatio")
        add("Revenue (TTM)", "totalRevenue", 1e-6, " –º–ª–Ω")
        data.append({"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": "Revenue –≤ –∫—Ä–∏–∑–∏—Å—ã", "–ó–Ω–∞—á–µ–Ω–∏–µ": "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ", "–û—Ü–µ–Ω–∫–∞": "üîµ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"})
        add("Operating Margin %", "operatingMargins", percent=True)
        add("Net Margin %", "profitMargins", percent=True)
        add("Net Income", "netIncomeToCommon", 1e-6, " –º–ª–Ω")
        add("Total Debt", "totalDebt", 1e-6, " –º–ª–Ω")
        add("Total Assets", "totalAssets", 1e-6, " –º–ª–Ω")
        add("Total Liabilities", "totalLiab", 1e-6, " –º–ª–Ω")
        add("Stockholders' Equity", "totalStockholderEquity", 1e-6, " –º–ª–Ω")
        add("EPS Estimate (Next Year)", "earningsGrowth")
        add("ROE (TTM)", "returnOnEquity", percent=True)
        data.append({"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": "Buyback (5Y)", "–ó–Ω–∞—á–µ–Ω–∏–µ": "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ", "–û—Ü–µ–Ω–∫–∞": "üîµ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"})
        data.append({"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": "ROIC", "–ó–Ω–∞—á–µ–Ω–∏–µ": "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ", "–û—Ü–µ–Ω–∫–∞": "üîµ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"})
        add("Operating CF", "operatingCashflow", 1e-6, " –º–ª–Ω")
        add("Free CF", "freeCashflow", 1e-6, " –º–ª–Ω")
        add("Short Float", "shortPercentOfFloat", percent=True)
        add("Institutional Ownership", "heldPercentInstitutions", percent=True)
        add("Employees", "fullTimeEmployees")
        data.append({"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": "Retail Stores", "–ó–Ω–∞—á–µ–Ω–∏–µ": "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ", "–û—Ü–µ–Ω–∫–∞": "üîµ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"})
        data.append({"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": "OpenInsiders", "–ó–Ω–∞—á–µ–Ω–∏–µ": "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ", "–û—Ü–µ–Ω–∫–∞": "üîµ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"})
        data.append({"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": "Quant Rating", "–ó–Ω–∞—á–µ–Ω–∏–µ": "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ", "–û—Ü–µ–Ω–∫–∞": "üîµ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"})

        return data
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []


def get_stock_factors(ticker):
    stock = yf.Ticker(ticker)
    info = stock.info

    value = 5 - min((info.get("forwardPE") or 30) / 10, 5)
    growth = min((info.get("revenueGrowth") or 0.2) * 25, 5)
    profitability = min((info.get("profitMargins") or 0.2) * 25, 5)
    momentum = min((info.get("52WeekChange") or 0.2) * 25, 5)
    eps_revisions = min((info.get("earningsQuarterlyGrowth") or 0.2) * 25, 5)

    return value, growth, profitability, momentum, eps_revisions

def get_rating_label(quant_rating):
    if 4.5 <= quant_rating <= 5.0:
        return "Strong Buy", "darkgreen"
    elif 3.5 <= quant_rating < 4.5:
        return "Buy", "green"
    elif 2.5 <= quant_rating < 3.5:
        return "Hold", "orange"
    elif 1.5 <= quant_rating < 2.5:
        return "Sell", "red"
    else:
        return "Strong Sell", "darkred"

def calculate_quant_rating(ticker):
    try:
        value, growth, profitability, momentum, eps_revisions = get_stock_factors(ticker)
        quant_rating = round((value + growth + profitability + momentum + eps_revisions) / 5, 2)
        label, color = get_rating_label(quant_rating)
        return quant_rating, label, color
    except Exception as e:
        return 0, f"–û—à–∏–±–∫–∞: {e}", "black"

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("üìä –ê–Ω–∞–ª–∏–∑ –∞–∫—Ü–∏–π –∏ Quant Rating")

ticker = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä:", "").upper()

if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"):
    if ticker:
        with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ..."):
            data = get_data(ticker)
            quant_value, quant_label, quant_color = calculate_quant_rating(ticker)

            if data:
                st.subheader("üìÑ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
                df = pd.DataFrame(data)
                st.dataframe(df, use_container_width=True)

                st.subheader("üìà Quant Rating")
                st.markdown(
                    f'<h4>–†–µ–π—Ç–∏–Ω–≥: <span style="color:{quant_color}">{quant_label} ({quant_value:.2f})</span></h4>',
                    unsafe_allow_html=True
                )
    else:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä.")
